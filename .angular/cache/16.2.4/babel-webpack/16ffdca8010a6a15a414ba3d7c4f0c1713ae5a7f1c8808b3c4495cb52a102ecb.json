{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { Observable } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class loginService {\n  constructor(http) {\n    this.http = http;\n    this.uri = 'http://localhost:8096';\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        \"Content-Type\": \"application/json\"\n      })\n    };\n  }\n  login(user) {\n    return this.http.post(`${this.uri}/login`, user, this.httpOptions);\n  }\n  handleError(error) {\n    console.log(error);\n    return Observable.throw(error);\n  }\n  static #_ = this.ɵfac = function loginService_Factory(t) {\n    return new (t || loginService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: loginService,\n    factory: loginService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"names":["HttpHeaders","Observable","loginService","constructor","http","uri","httpOptions","headers","login","user","post","handleError","error","console","log","throw","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\feder\\OneDrive\\Documents\\GitHub\\systemFeedback\\src\\app\\servizi\\login-service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { TokenJWT } from \"../model/TokenJWT\";\r\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs\";\r\nimport { User } from \"../model/user\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class loginService {\r\n  uri: string = 'http://localhost:8096';\r\n\r\n  httpOptions = {\r\n    headers: new HttpHeaders({\r\n      \"Content-Type\": \"application/json\",\r\n    }),\r\n  };\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  login(user: User): Observable<TokenJWT> {\r\n    return this.http.post<TokenJWT>(`${this.uri}/login`, user, this.httpOptions);\r\n  }\r\n\r\n  handleError(error: any) {\r\n    console.log(error);\r\n    return Observable.throw(error);\r\n  }\r\n}\r\n  // isUserLoggedIn(): boolean {\r\n  //   if (this.token != undefined) {\r\n  //     this.isUserLogged = true;\r\n  //   } else {\r\n  //     this.isUserLogged = false;\r\n  //   }\r\n  //   return this.isUserLogged;\r\n  // }\r\n\r\n\r\n"],"mappings":"AAEA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAASC,UAAU,QAAQ,MAAM;;;AAMjC,OAAM,MAAOC,YAAY;EASvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IARxB,KAAAC,GAAG,GAAW,uBAAuB;IAErC,KAAAC,WAAW,GAAG;MACZC,OAAO,EAAE,IAAIP,WAAW,CAAC;QACvB,cAAc,EAAE;OACjB;KACF;EAEsC;EAEvCQ,KAAKA,CAACC,IAAU;IACd,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAW,GAAG,IAAI,CAACL,GAAG,QAAQ,EAAEI,IAAI,EAAE,IAAI,CAACH,WAAW,CAAC;EAC9E;EAEAK,WAAWA,CAACC,KAAU;IACpBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClB,OAAOX,UAAU,CAACc,KAAK,CAACH,KAAK,CAAC;EAChC;EAAC,QAAAI,CAAA,G;qBAlBUd,YAAY,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZnB,YAAY;IAAAoB,OAAA,EAAZpB,YAAY,CAAAqB,IAAA;IAAAC,UAAA,EAFX;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}