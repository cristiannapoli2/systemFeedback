{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserCrudService {\n  constructor(http) {\n    this.http = http;\n    this.uri = \"http://localhost:8096\";\n    this.isUserLogged = false;\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        \"Content-Type\": \"application/json\"\n      })\n    };\n  }\n  addUser(user) {\n    return this.http.post(`${this.uri}/upsertUser`, user);\n  }\n  getUsers(page) {\n    return this.http.get(`${this.uri}/getUsers/${page}`);\n  }\n  deleteUser(id) {\n    return this.http.get(`${this.uri}/deleteUser/${id}`);\n  }\n  getUser(id) {\n    return this.http.get(`${this.uri}/getUser/${id}`);\n  }\n  getUsersDim() {\n    return this.http.get(`${this.uri}/getSize`);\n  }\n  getRoles() {\n    return this.http.get(`${this.uri}/getRoles`);\n  }\n  login(user) {\n    this.currentAccount = user.username;\n    this.currentAccount = user.password;\n    return this.http.post(`${this.uri}/login`, user);\n  }\n  isUserLoggedIn() {\n    if (this.token != undefined) {\n      this.isUserLogged = true;\n    } else {\n      this.isUserLogged = false;\n    }\n    return this.isUserLogged;\n  }\n  static #_ = this.ɵfac = function UserCrudService_Factory(t) {\n    return new (t || UserCrudService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserCrudService,\n    factory: UserCrudService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"names":["HttpHeaders","UserCrudService","constructor","http","uri","isUserLogged","httpOptions","headers","addUser","user","post","getUsers","page","get","deleteUser","id","getUser","getUsersDim","getRoles","login","currentAccount","username","password","isUserLoggedIn","token","undefined","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\feder\\OneDrive\\Documents\\GitHub\\systemFeedback\\src\\app\\servizi\\user-crud.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs\";\r\nimport { User } from \"../model/user\";\r\nimport { Role } from \"../model/role\";\r\nimport { TokenJWT } from \"../model/TokenJWT\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class UserCrudService {\r\n  uri: string = \"http://localhost:8096\";\r\n  private isUserLogged = false;\r\n  token!: TokenJWT;\r\n  username!: string;\r\n  password!: string;\r\n\r\n  httpOptions = {\r\n    headers: new HttpHeaders({\r\n      \"Content-Type\": \"application/json\",\r\n    }),\r\n  };\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  addUser(user: User): Observable<string> {\r\n    return this.http.post<string>(`${this.uri}/upsertUser`, user);\r\n  }\r\n  getUsers(page: number): Observable<User[]> {\r\n    return this.http.get<User[]>(`${this.uri}/getUsers/${page}`);\r\n  }\r\n  deleteUser(id: number): Observable<string> {\r\n    return this.http.get<string>(`${this.uri}/deleteUser/${id}`);\r\n  }\r\n  getUser(id: number): Observable<User> {\r\n    return this.http.get<User>(`${this.uri}/getUser/${id}`);\r\n  }\r\n\r\n  getUsersDim(): Observable<number> {\r\n    return this.http.get<number>(`${this.uri}/getSize`);\r\n  }\r\n\r\n  getRoles(): Observable<Role[]> {\r\n    return this.http.get<Role[]>(`${this.uri}/getRoles`);\r\n  }\r\n\r\n  login(user:User): Observable<TokenJWT> {\r\n    this.currentAccount = user.username;\r\n    this.currentAccount = user.password;\r\n    return this.http.post<TokenJWT>(`${this.uri}/login`, user);\r\n  }\r\n  isUserLoggedIn(): boolean {\r\n    if (this.token != undefined) {\r\n      this.isUserLogged = true;\r\n    } else {\r\n      this.isUserLogged = false;\r\n    }\r\n    return this.isUserLogged;\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAS9D,OAAM,MAAOC,eAAe;EAa1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAZxB,KAAAC,GAAG,GAAW,uBAAuB;IAC7B,KAAAC,YAAY,GAAG,KAAK;IAK5B,KAAAC,WAAW,GAAG;MACZC,OAAO,EAAE,IAAIP,WAAW,CAAC;QACvB,cAAc,EAAE;OACjB;KACF;EAEsC;EAEvCQ,OAAOA,CAACC,IAAU;IAChB,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAS,GAAG,IAAI,CAACN,GAAG,aAAa,EAAEK,IAAI,CAAC;EAC/D;EACAE,QAAQA,CAACC,IAAY;IACnB,OAAO,IAAI,CAACT,IAAI,CAACU,GAAG,CAAS,GAAG,IAAI,CAACT,GAAG,aAAaQ,IAAI,EAAE,CAAC;EAC9D;EACAE,UAAUA,CAACC,EAAU;IACnB,OAAO,IAAI,CAACZ,IAAI,CAACU,GAAG,CAAS,GAAG,IAAI,CAACT,GAAG,eAAeW,EAAE,EAAE,CAAC;EAC9D;EACAC,OAAOA,CAACD,EAAU;IAChB,OAAO,IAAI,CAACZ,IAAI,CAACU,GAAG,CAAO,GAAG,IAAI,CAACT,GAAG,YAAYW,EAAE,EAAE,CAAC;EACzD;EAEAE,WAAWA,CAAA;IACT,OAAO,IAAI,CAACd,IAAI,CAACU,GAAG,CAAS,GAAG,IAAI,CAACT,GAAG,UAAU,CAAC;EACrD;EAEAc,QAAQA,CAAA;IACN,OAAO,IAAI,CAACf,IAAI,CAACU,GAAG,CAAS,GAAG,IAAI,CAACT,GAAG,WAAW,CAAC;EACtD;EAEAe,KAAKA,CAACV,IAAS;IACb,IAAI,CAACW,cAAc,GAAGX,IAAI,CAACY,QAAQ;IACnC,IAAI,CAACD,cAAc,GAAGX,IAAI,CAACa,QAAQ;IACnC,OAAO,IAAI,CAACnB,IAAI,CAACO,IAAI,CAAW,GAAG,IAAI,CAACN,GAAG,QAAQ,EAAEK,IAAI,CAAC;EAC5D;EACAc,cAAcA,CAAA;IACZ,IAAI,IAAI,CAACC,KAAK,IAAIC,SAAS,EAAE;MAC3B,IAAI,CAACpB,YAAY,GAAG,IAAI;KACzB,MAAM;MACL,IAAI,CAACA,YAAY,GAAG,KAAK;;IAE3B,OAAO,IAAI,CAACA,YAAY;EAC1B;EAAC,QAAAqB,CAAA,G;qBAhDUzB,eAAe,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAf9B,eAAe;IAAA+B,OAAA,EAAf/B,eAAe,CAAAgC,IAAA;IAAAC,UAAA,EAFd;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}