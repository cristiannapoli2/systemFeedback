{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class loginService {\n  constructor(http) {\n    this.http = http;\n    this.uri = \"http://localhost:8096\";\n    this.isUserLogged = false;\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        \"Content-Type\": \"application/json\"\n      })\n    };\n  }\n  login(user) {\n    return this.http.post(`${this.uri}/login`, user, this.httpOptions);\n  }\n  isUserLoggedIn() {\n    if (this.token != undefined) {\n      this.isUserLogged = true;\n    } else {\n      this.isUserLogged = false;\n    }\n    return this.isUserLogged;\n  }\n  static #_ = this.ɵfac = function loginService_Factory(t) {\n    return new (t || loginService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: loginService,\n    factory: loginService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"names":["HttpHeaders","loginService","constructor","http","uri","isUserLogged","httpOptions","headers","login","user","post","isUserLoggedIn","token","undefined","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Sebastiano Allocca\\Documents\\GitHub\\systemFeedback\\systemFeedback\\src\\app\\servizi\\login-service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { TokenJWT } from \"../model/TokenJWT\";\r\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs\";\r\nimport { User } from \"../model/user\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class loginService {\r\n  uri: string = \"http://localhost:8096\";\r\n  private isUserLogged = false;\r\n  token!: TokenJWT;\r\n  currentAccount!: string;\r\n  httpOptions = {\r\n    headers: new HttpHeaders({\r\n      \"Content-Type\": \"application/json\",\r\n    }),\r\n  };\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  login(user: User): Observable<TokenJWT> {\r\n    return this.http.post<TokenJWT>(\r\n      `${this.uri}/login`,\r\n      user,\r\n      this.httpOptions\r\n    );\r\n  }\r\n\r\n  isUserLoggedIn(): boolean {\r\n    if (this.token != undefined) {\r\n      this.isUserLogged = true;\r\n    } else {\r\n      this.isUserLogged = false;\r\n    }\r\n    return this.isUserLogged;\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAO9D,OAAM,MAAOC,YAAY;EAWvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAVxB,KAAAC,GAAG,GAAW,uBAAuB;IAC7B,KAAAC,YAAY,GAAG,KAAK;IAG5B,KAAAC,WAAW,GAAG;MACZC,OAAO,EAAE,IAAIP,WAAW,CAAC;QACvB,cAAc,EAAE;OACjB;KACF;EAEsC;EAEvCQ,KAAKA,CAACC,IAAU;IACd,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CACnB,GAAG,IAAI,CAACN,GAAG,QAAQ,EACnBK,IAAI,EACJ,IAAI,CAACH,WAAW,CACjB;EACH;EAEAK,cAAcA,CAAA;IACZ,IAAI,IAAI,CAACC,KAAK,IAAIC,SAAS,EAAE;MAC3B,IAAI,CAACR,YAAY,GAAG,IAAI;KACzB,MAAM;MACL,IAAI,CAACA,YAAY,GAAG,KAAK;;IAE3B,OAAO,IAAI,CAACA,YAAY;EAC1B;EAAC,QAAAS,CAAA,G;qBA5BUb,YAAY,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZlB,YAAY;IAAAmB,OAAA,EAAZnB,YAAY,CAAAoB,IAAA;IAAAC,UAAA,EAFX;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}